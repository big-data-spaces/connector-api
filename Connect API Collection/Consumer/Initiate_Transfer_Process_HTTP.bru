meta {
  name: Initiate_Transfer_Process_HTTP
  type: http
  seq: 10
}

post {
  url: {{CONSUMER_MANAGEMENT_URL}}/v2/transferprocesses
  body: json
  auth: apikey
}

auth:apikey {
  key: x-api-key
  value: {{CONSUMER_API_KEY}}
  placement: header
}

body:json {
  {
      "@context": {
          "odrl": "http://www.w3.org/ns/odrl/2/"
      },
      "assetId": "{{ASSET_ID}}",
      "connectorAddress": "{{PROVIDER_PROTOCOL_URL}}",
      "contractId": "{{AGREEMENT_ID}}",
      "connectorId": "{{PROVIDER_ID}}",
      "providerId": "{{PROVIDER_ID}}",
      "dataDestination": {
          "type": "HttpData",
          "baseUrl": "https://webhook.site/{{WEBHOOK_ID}}",
          "authKey": "Authorization",
          "authCode": "Basic {{TARGET_AUTHKEY}}",
          "method": "POST"
      },
      "managedResources": false,
      "protocol": "dataspace-protocol-http",
      "transferType": {
          "contentType": "application/octet-stream",
          "isFinite": false
      }
  }
}

script:pre-request {
  bru.setVar("TRANSFER_ID", Math.random());
}

tests {
  test("Body matches string", function () {
      var jsonData = res.getBody();
      bru.setVar("TRANSFER_PROCESS_ID", jsonData["@id"]);
  });
}

docs {
  # Initiate a Transfer Process to HTTP
  
  We could now reuse the still valid contract agreement to initiate a second transfer process to the same data offer/asset, but this time using a different destination/transfer protocol, namely HTTP.
  
  The HttpData dataDestination is described by
  - `baseUrl`: The http(s) address that should be used for the transfer
  - `method`: can be any http method, such as PUT, POST, PATCH
  - `authKey`: A header that will be used for authenticating against baseUrl
  - `authCode`: A header value that will be used for authenticating against baseUrl
  
  > Note that the actual binary content will be streamed right from the (transparent) asset source protocol into the http body when the Provider connector is performing the transfer.
  
  
  
}
